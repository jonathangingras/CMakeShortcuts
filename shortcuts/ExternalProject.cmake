include(ExternalProject)

if(NOT EXTERNAL_PROJECT_INSTALL_PREFIX)
  set(EXTERNAL_PROJECT_INSTALL_PREFIX_PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/extern-private")
  set(EXTERNAL_PROJECT_INSTALL_PREFIX_PUBLIC "${CMAKE_CURRENT_BINARY_DIR}/extern-public")
endif()

function(ExternalProject_add_private)
  cmake_parse_arguments(PARSED "" "" "CMAKE_ARGS" ${ARGN})

  ExternalProject_add(
    ${ARGN}
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTERNAL_PROJECT_INSTALL_PREFIX_PRIVATE} ${PARSED_CMAKE_ARGS}
    UPDATE_COMMAND ""
    )

  include_directories(${EXTERNAL_PROJECT_INSTALL_PREFIX_PRIVATE}/include)
  link_directories(${EXTERNAL_PROJECT_INSTALL_PREFIX_PRIVATE}/lib)
endfunction()

function(ExternalProject_add_public)
  cmake_parse_arguments(PARSED "" "" "CMAKE_ARGS" ${ARGN})

  ExternalProject_add(
    ${ARGN}
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTERNAL_PROJECT_INSTALL_PREFIX_PUBLIC} ${PARSED_CMAKE_ARGS}
    UPDATE_COMMAND ""
    )

  include_directories(${EXTERNAL_PROJECT_INSTALL_PREFIX_PUBLIC}/include)
  link_directories(${EXTERNAL_PROJECT_INSTALL_PREFIX_PUBLIC}/lib)

  install(DIRECTORY ${EXTERNAL_PROJECT_INSTALL_PREFIX_PUBLIC}/ DESTINATION ${CMAKE_INSTALL_PREFIX} USE_SOURCE_PERMISSIONS)
endfunction()
